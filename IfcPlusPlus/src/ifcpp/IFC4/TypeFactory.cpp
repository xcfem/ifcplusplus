/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <map>
#include <functional>
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/IFC4/include/IfcAbsorbedDoseMeasure.h"
#include "ifcpp/IFC4/include/IfcAccelerationMeasure.h"
#include "ifcpp/IFC4/include/IfcActionRequestTypeEnum.h"
#include "ifcpp/IFC4/include/IfcActionSourceTypeEnum.h"
#include "ifcpp/IFC4/include/IfcActionTypeEnum.h"
#include "ifcpp/IFC4/include/IfcActorSelect.h"
#include "ifcpp/IFC4/include/IfcActuatorTypeEnum.h"
#include "ifcpp/IFC4/include/IfcAddressTypeEnum.h"
#include "ifcpp/IFC4/include/IfcAirTerminalBoxTypeEnum.h"
#include "ifcpp/IFC4/include/IfcAirTerminalTypeEnum.h"
#include "ifcpp/IFC4/include/IfcAirToAirHeatRecoveryTypeEnum.h"
#include "ifcpp/IFC4/include/IfcAlarmTypeEnum.h"
#include "ifcpp/IFC4/include/IfcAmountOfSubstanceMeasure.h"
#include "ifcpp/IFC4/include/IfcAnalysisModelTypeEnum.h"
#include "ifcpp/IFC4/include/IfcAnalysisTheoryTypeEnum.h"
#include "ifcpp/IFC4/include/IfcAngularVelocityMeasure.h"
#include "ifcpp/IFC4/include/IfcAppliedValueSelect.h"
#include "ifcpp/IFC4/include/IfcArcIndex.h"
#include "ifcpp/IFC4/include/IfcAreaDensityMeasure.h"
#include "ifcpp/IFC4/include/IfcAreaMeasure.h"
#include "ifcpp/IFC4/include/IfcArithmeticOperatorEnum.h"
#include "ifcpp/IFC4/include/IfcAssemblyPlaceEnum.h"
#include "ifcpp/IFC4/include/IfcAudioVisualApplianceTypeEnum.h"
#include "ifcpp/IFC4/include/IfcAxis2Placement.h"
#include "ifcpp/IFC4/include/IfcBSplineCurveForm.h"
#include "ifcpp/IFC4/include/IfcBSplineSurfaceForm.h"
#include "ifcpp/IFC4/include/IfcBeamTypeEnum.h"
#include "ifcpp/IFC4/include/IfcBenchmarkEnum.h"
#include "ifcpp/IFC4/include/IfcBendingParameterSelect.h"
#include "ifcpp/IFC4/include/IfcBinary.h"
#include "ifcpp/IFC4/include/IfcBoilerTypeEnum.h"
#include "ifcpp/IFC4/include/IfcBoolean.h"
#include "ifcpp/IFC4/include/IfcBooleanOperand.h"
#include "ifcpp/IFC4/include/IfcBooleanOperator.h"
#include "ifcpp/IFC4/include/IfcBoxAlignment.h"
#include "ifcpp/IFC4/include/IfcBuildingElementPartTypeEnum.h"
#include "ifcpp/IFC4/include/IfcBuildingElementProxyTypeEnum.h"
#include "ifcpp/IFC4/include/IfcBuildingSystemTypeEnum.h"
#include "ifcpp/IFC4/include/IfcBurnerTypeEnum.h"
#include "ifcpp/IFC4/include/IfcCableCarrierFittingTypeEnum.h"
#include "ifcpp/IFC4/include/IfcCableCarrierSegmentTypeEnum.h"
#include "ifcpp/IFC4/include/IfcCableFittingTypeEnum.h"
#include "ifcpp/IFC4/include/IfcCableSegmentTypeEnum.h"
#include "ifcpp/IFC4/include/IfcCardinalPointReference.h"
#include "ifcpp/IFC4/include/IfcChangeActionEnum.h"
#include "ifcpp/IFC4/include/IfcChillerTypeEnum.h"
#include "ifcpp/IFC4/include/IfcChimneyTypeEnum.h"
#include "ifcpp/IFC4/include/IfcClassificationReferenceSelect.h"
#include "ifcpp/IFC4/include/IfcClassificationSelect.h"
#include "ifcpp/IFC4/include/IfcCoilTypeEnum.h"
#include "ifcpp/IFC4/include/IfcColour.h"
#include "ifcpp/IFC4/include/IfcColourOrFactor.h"
#include "ifcpp/IFC4/include/IfcColumnTypeEnum.h"
#include "ifcpp/IFC4/include/IfcCommunicationsApplianceTypeEnum.h"
#include "ifcpp/IFC4/include/IfcComplexNumber.h"
#include "ifcpp/IFC4/include/IfcComplexPropertyTemplateTypeEnum.h"
#include "ifcpp/IFC4/include/IfcCompoundPlaneAngleMeasure.h"
#include "ifcpp/IFC4/include/IfcCompressorTypeEnum.h"
#include "ifcpp/IFC4/include/IfcCondenserTypeEnum.h"
#include "ifcpp/IFC4/include/IfcConnectionTypeEnum.h"
#include "ifcpp/IFC4/include/IfcConstraintEnum.h"
#include "ifcpp/IFC4/include/IfcConstructionEquipmentResourceTypeEnum.h"
#include "ifcpp/IFC4/include/IfcConstructionMaterialResourceTypeEnum.h"
#include "ifcpp/IFC4/include/IfcConstructionProductResourceTypeEnum.h"
#include "ifcpp/IFC4/include/IfcContextDependentMeasure.h"
#include "ifcpp/IFC4/include/IfcControllerTypeEnum.h"
#include "ifcpp/IFC4/include/IfcCooledBeamTypeEnum.h"
#include "ifcpp/IFC4/include/IfcCoolingTowerTypeEnum.h"
#include "ifcpp/IFC4/include/IfcCoordinateReferenceSystemSelect.h"
#include "ifcpp/IFC4/include/IfcCostItemTypeEnum.h"
#include "ifcpp/IFC4/include/IfcCostScheduleTypeEnum.h"
#include "ifcpp/IFC4/include/IfcCountMeasure.h"
#include "ifcpp/IFC4/include/IfcCoveringTypeEnum.h"
#include "ifcpp/IFC4/include/IfcCrewResourceTypeEnum.h"
#include "ifcpp/IFC4/include/IfcCsgSelect.h"
#include "ifcpp/IFC4/include/IfcCurtainWallTypeEnum.h"
#include "ifcpp/IFC4/include/IfcCurvatureMeasure.h"
#include "ifcpp/IFC4/include/IfcCurveFontOrScaledCurveFontSelect.h"
#include "ifcpp/IFC4/include/IfcCurveInterpolationEnum.h"
#include "ifcpp/IFC4/include/IfcCurveOnSurface.h"
#include "ifcpp/IFC4/include/IfcCurveOrEdgeCurve.h"
#include "ifcpp/IFC4/include/IfcCurveStyleFontSelect.h"
#include "ifcpp/IFC4/include/IfcDamperTypeEnum.h"
#include "ifcpp/IFC4/include/IfcDataOriginEnum.h"
#include "ifcpp/IFC4/include/IfcDate.h"
#include "ifcpp/IFC4/include/IfcDateTime.h"
#include "ifcpp/IFC4/include/IfcDayInMonthNumber.h"
#include "ifcpp/IFC4/include/IfcDayInWeekNumber.h"
#include "ifcpp/IFC4/include/IfcDefinitionSelect.h"
#include "ifcpp/IFC4/include/IfcDerivedMeasureValue.h"
#include "ifcpp/IFC4/include/IfcDerivedUnitEnum.h"
#include "ifcpp/IFC4/include/IfcDescriptiveMeasure.h"
#include "ifcpp/IFC4/include/IfcDimensionCount.h"
#include "ifcpp/IFC4/include/IfcDirectionSenseEnum.h"
#include "ifcpp/IFC4/include/IfcDiscreteAccessoryTypeEnum.h"
#include "ifcpp/IFC4/include/IfcDistributionChamberElementTypeEnum.h"
#include "ifcpp/IFC4/include/IfcDistributionPortTypeEnum.h"
#include "ifcpp/IFC4/include/IfcDistributionSystemEnum.h"
#include "ifcpp/IFC4/include/IfcDocumentConfidentialityEnum.h"
#include "ifcpp/IFC4/include/IfcDocumentSelect.h"
#include "ifcpp/IFC4/include/IfcDocumentStatusEnum.h"
#include "ifcpp/IFC4/include/IfcDoorPanelOperationEnum.h"
#include "ifcpp/IFC4/include/IfcDoorPanelPositionEnum.h"
#include "ifcpp/IFC4/include/IfcDoorStyleConstructionEnum.h"
#include "ifcpp/IFC4/include/IfcDoorStyleOperationEnum.h"
#include "ifcpp/IFC4/include/IfcDoorTypeEnum.h"
#include "ifcpp/IFC4/include/IfcDoorTypeOperationEnum.h"
#include "ifcpp/IFC4/include/IfcDoseEquivalentMeasure.h"
#include "ifcpp/IFC4/include/IfcDuctFittingTypeEnum.h"
#include "ifcpp/IFC4/include/IfcDuctSegmentTypeEnum.h"
#include "ifcpp/IFC4/include/IfcDuctSilencerTypeEnum.h"
#include "ifcpp/IFC4/include/IfcDuration.h"
#include "ifcpp/IFC4/include/IfcDynamicViscosityMeasure.h"
#include "ifcpp/IFC4/include/IfcElectricApplianceTypeEnum.h"
#include "ifcpp/IFC4/include/IfcElectricCapacitanceMeasure.h"
#include "ifcpp/IFC4/include/IfcElectricChargeMeasure.h"
#include "ifcpp/IFC4/include/IfcElectricConductanceMeasure.h"
#include "ifcpp/IFC4/include/IfcElectricCurrentMeasure.h"
#include "ifcpp/IFC4/include/IfcElectricDistributionBoardTypeEnum.h"
#include "ifcpp/IFC4/include/IfcElectricFlowStorageDeviceTypeEnum.h"
#include "ifcpp/IFC4/include/IfcElectricGeneratorTypeEnum.h"
#include "ifcpp/IFC4/include/IfcElectricMotorTypeEnum.h"
#include "ifcpp/IFC4/include/IfcElectricResistanceMeasure.h"
#include "ifcpp/IFC4/include/IfcElectricTimeControlTypeEnum.h"
#include "ifcpp/IFC4/include/IfcElectricVoltageMeasure.h"
#include "ifcpp/IFC4/include/IfcElementAssemblyTypeEnum.h"
#include "ifcpp/IFC4/include/IfcElementCompositionEnum.h"
#include "ifcpp/IFC4/include/IfcEnergyMeasure.h"
#include "ifcpp/IFC4/include/IfcEngineTypeEnum.h"
#include "ifcpp/IFC4/include/IfcEvaporativeCoolerTypeEnum.h"
#include "ifcpp/IFC4/include/IfcEvaporatorTypeEnum.h"
#include "ifcpp/IFC4/include/IfcEventTriggerTypeEnum.h"
#include "ifcpp/IFC4/include/IfcEventTypeEnum.h"
#include "ifcpp/IFC4/include/IfcExternalSpatialElementTypeEnum.h"
#include "ifcpp/IFC4/include/IfcFanTypeEnum.h"
#include "ifcpp/IFC4/include/IfcFastenerTypeEnum.h"
#include "ifcpp/IFC4/include/IfcFillStyleSelect.h"
#include "ifcpp/IFC4/include/IfcFilterTypeEnum.h"
#include "ifcpp/IFC4/include/IfcFireSuppressionTerminalTypeEnum.h"
#include "ifcpp/IFC4/include/IfcFlowDirectionEnum.h"
#include "ifcpp/IFC4/include/IfcFlowInstrumentTypeEnum.h"
#include "ifcpp/IFC4/include/IfcFlowMeterTypeEnum.h"
#include "ifcpp/IFC4/include/IfcFontStyle.h"
#include "ifcpp/IFC4/include/IfcFontVariant.h"
#include "ifcpp/IFC4/include/IfcFontWeight.h"
#include "ifcpp/IFC4/include/IfcFootingTypeEnum.h"
#include "ifcpp/IFC4/include/IfcForceMeasure.h"
#include "ifcpp/IFC4/include/IfcFrequencyMeasure.h"
#include "ifcpp/IFC4/include/IfcFurnitureTypeEnum.h"
#include "ifcpp/IFC4/include/IfcGeographicElementTypeEnum.h"
#include "ifcpp/IFC4/include/IfcGeometricProjectionEnum.h"
#include "ifcpp/IFC4/include/IfcGeometricSetSelect.h"
#include "ifcpp/IFC4/include/IfcGlobalOrLocalEnum.h"
#include "ifcpp/IFC4/include/IfcGloballyUniqueId.h"
#include "ifcpp/IFC4/include/IfcGridPlacementDirectionSelect.h"
#include "ifcpp/IFC4/include/IfcGridTypeEnum.h"
#include "ifcpp/IFC4/include/IfcHatchLineDistanceSelect.h"
#include "ifcpp/IFC4/include/IfcHeatExchangerTypeEnum.h"
#include "ifcpp/IFC4/include/IfcHeatFluxDensityMeasure.h"
#include "ifcpp/IFC4/include/IfcHeatingValueMeasure.h"
#include "ifcpp/IFC4/include/IfcHumidifierTypeEnum.h"
#include "ifcpp/IFC4/include/IfcIdentifier.h"
#include "ifcpp/IFC4/include/IfcIlluminanceMeasure.h"
#include "ifcpp/IFC4/include/IfcInductanceMeasure.h"
#include "ifcpp/IFC4/include/IfcInteger.h"
#include "ifcpp/IFC4/include/IfcIntegerCountRateMeasure.h"
#include "ifcpp/IFC4/include/IfcInterceptorTypeEnum.h"
#include "ifcpp/IFC4/include/IfcInternalOrExternalEnum.h"
#include "ifcpp/IFC4/include/IfcInventoryTypeEnum.h"
#include "ifcpp/IFC4/include/IfcIonConcentrationMeasure.h"
#include "ifcpp/IFC4/include/IfcIsothermalMoistureCapacityMeasure.h"
#include "ifcpp/IFC4/include/IfcJunctionBoxTypeEnum.h"
#include "ifcpp/IFC4/include/IfcKinematicViscosityMeasure.h"
#include "ifcpp/IFC4/include/IfcKnotType.h"
#include "ifcpp/IFC4/include/IfcLabel.h"
#include "ifcpp/IFC4/include/IfcLaborResourceTypeEnum.h"
#include "ifcpp/IFC4/include/IfcLampTypeEnum.h"
#include "ifcpp/IFC4/include/IfcLanguageId.h"
#include "ifcpp/IFC4/include/IfcLayerSetDirectionEnum.h"
#include "ifcpp/IFC4/include/IfcLayeredItem.h"
#include "ifcpp/IFC4/include/IfcLengthMeasure.h"
#include "ifcpp/IFC4/include/IfcLibrarySelect.h"
#include "ifcpp/IFC4/include/IfcLightDistributionCurveEnum.h"
#include "ifcpp/IFC4/include/IfcLightDistributionDataSourceSelect.h"
#include "ifcpp/IFC4/include/IfcLightEmissionSourceEnum.h"
#include "ifcpp/IFC4/include/IfcLightFixtureTypeEnum.h"
#include "ifcpp/IFC4/include/IfcLineIndex.h"
#include "ifcpp/IFC4/include/IfcLinearForceMeasure.h"
#include "ifcpp/IFC4/include/IfcLinearMomentMeasure.h"
#include "ifcpp/IFC4/include/IfcLinearStiffnessMeasure.h"
#include "ifcpp/IFC4/include/IfcLinearVelocityMeasure.h"
#include "ifcpp/IFC4/include/IfcLoadGroupTypeEnum.h"
#include "ifcpp/IFC4/include/IfcLogical.h"
#include "ifcpp/IFC4/include/IfcLogicalOperatorEnum.h"
#include "ifcpp/IFC4/include/IfcLuminousFluxMeasure.h"
#include "ifcpp/IFC4/include/IfcLuminousIntensityDistributionMeasure.h"
#include "ifcpp/IFC4/include/IfcLuminousIntensityMeasure.h"
#include "ifcpp/IFC4/include/IfcMagneticFluxDensityMeasure.h"
#include "ifcpp/IFC4/include/IfcMagneticFluxMeasure.h"
#include "ifcpp/IFC4/include/IfcMassDensityMeasure.h"
#include "ifcpp/IFC4/include/IfcMassFlowRateMeasure.h"
#include "ifcpp/IFC4/include/IfcMassMeasure.h"
#include "ifcpp/IFC4/include/IfcMassPerLengthMeasure.h"
#include "ifcpp/IFC4/include/IfcMaterialSelect.h"
#include "ifcpp/IFC4/include/IfcMeasureValue.h"
#include "ifcpp/IFC4/include/IfcMechanicalFastenerTypeEnum.h"
#include "ifcpp/IFC4/include/IfcMedicalDeviceTypeEnum.h"
#include "ifcpp/IFC4/include/IfcMemberTypeEnum.h"
#include "ifcpp/IFC4/include/IfcMetricValueSelect.h"
#include "ifcpp/IFC4/include/IfcModulusOfElasticityMeasure.h"
#include "ifcpp/IFC4/include/IfcModulusOfLinearSubgradeReactionMeasure.h"
#include "ifcpp/IFC4/include/IfcModulusOfRotationalSubgradeReactionMeasure.h"
#include "ifcpp/IFC4/include/IfcModulusOfRotationalSubgradeReactionSelect.h"
#include "ifcpp/IFC4/include/IfcModulusOfSubgradeReactionMeasure.h"
#include "ifcpp/IFC4/include/IfcModulusOfSubgradeReactionSelect.h"
#include "ifcpp/IFC4/include/IfcModulusOfTranslationalSubgradeReactionSelect.h"
#include "ifcpp/IFC4/include/IfcMoistureDiffusivityMeasure.h"
#include "ifcpp/IFC4/include/IfcMolecularWeightMeasure.h"
#include "ifcpp/IFC4/include/IfcMomentOfInertiaMeasure.h"
#include "ifcpp/IFC4/include/IfcMonetaryMeasure.h"
#include "ifcpp/IFC4/include/IfcMonthInYearNumber.h"
#include "ifcpp/IFC4/include/IfcMotorConnectionTypeEnum.h"
#include "ifcpp/IFC4/include/IfcNonNegativeLengthMeasure.h"
#include "ifcpp/IFC4/include/IfcNormalisedRatioMeasure.h"
#include "ifcpp/IFC4/include/IfcNullStyle.h"
#include "ifcpp/IFC4/include/IfcNumericMeasure.h"
#include "ifcpp/IFC4/include/IfcObjectReferenceSelect.h"
#include "ifcpp/IFC4/include/IfcObjectTypeEnum.h"
#include "ifcpp/IFC4/include/IfcObjectiveEnum.h"
#include "ifcpp/IFC4/include/IfcOccupantTypeEnum.h"
#include "ifcpp/IFC4/include/IfcOpeningElementTypeEnum.h"
#include "ifcpp/IFC4/include/IfcOutletTypeEnum.h"
#include "ifcpp/IFC4/include/IfcPHMeasure.h"
#include "ifcpp/IFC4/include/IfcParameterValue.h"
#include "ifcpp/IFC4/include/IfcPerformanceHistoryTypeEnum.h"
#include "ifcpp/IFC4/include/IfcPermeableCoveringOperationEnum.h"
#include "ifcpp/IFC4/include/IfcPermitTypeEnum.h"
#include "ifcpp/IFC4/include/IfcPhysicalOrVirtualEnum.h"
#include "ifcpp/IFC4/include/IfcPileConstructionEnum.h"
#include "ifcpp/IFC4/include/IfcPileTypeEnum.h"
#include "ifcpp/IFC4/include/IfcPipeFittingTypeEnum.h"
#include "ifcpp/IFC4/include/IfcPipeSegmentTypeEnum.h"
#include "ifcpp/IFC4/include/IfcPlanarForceMeasure.h"
#include "ifcpp/IFC4/include/IfcPlaneAngleMeasure.h"
#include "ifcpp/IFC4/include/IfcPlateTypeEnum.h"
#include "ifcpp/IFC4/include/IfcPointOrVertexPoint.h"
#include "ifcpp/IFC4/include/IfcPositiveInteger.h"
#include "ifcpp/IFC4/include/IfcPositiveLengthMeasure.h"
#include "ifcpp/IFC4/include/IfcPositivePlaneAngleMeasure.h"
#include "ifcpp/IFC4/include/IfcPositiveRatioMeasure.h"
#include "ifcpp/IFC4/include/IfcPowerMeasure.h"
#include "ifcpp/IFC4/include/IfcPreferredSurfaceCurveRepresentation.h"
#include "ifcpp/IFC4/include/IfcPresentableText.h"
#include "ifcpp/IFC4/include/IfcPresentationStyleSelect.h"
#include "ifcpp/IFC4/include/IfcPressureMeasure.h"
#include "ifcpp/IFC4/include/IfcProcedureTypeEnum.h"
#include "ifcpp/IFC4/include/IfcProcessSelect.h"
#include "ifcpp/IFC4/include/IfcProductRepresentationSelect.h"
#include "ifcpp/IFC4/include/IfcProductSelect.h"
#include "ifcpp/IFC4/include/IfcProfileTypeEnum.h"
#include "ifcpp/IFC4/include/IfcProjectOrderTypeEnum.h"
#include "ifcpp/IFC4/include/IfcProjectedOrTrueLengthEnum.h"
#include "ifcpp/IFC4/include/IfcProjectionElementTypeEnum.h"
#include "ifcpp/IFC4/include/IfcPropertySetDefinitionSelect.h"
#include "ifcpp/IFC4/include/IfcPropertySetDefinitionSet.h"
#include "ifcpp/IFC4/include/IfcPropertySetTemplateTypeEnum.h"
#include "ifcpp/IFC4/include/IfcProtectiveDeviceTrippingUnitTypeEnum.h"
#include "ifcpp/IFC4/include/IfcProtectiveDeviceTypeEnum.h"
#include "ifcpp/IFC4/include/IfcPumpTypeEnum.h"
#include "ifcpp/IFC4/include/IfcRadioActivityMeasure.h"
#include "ifcpp/IFC4/include/IfcRailingTypeEnum.h"
#include "ifcpp/IFC4/include/IfcRampFlightTypeEnum.h"
#include "ifcpp/IFC4/include/IfcRampTypeEnum.h"
#include "ifcpp/IFC4/include/IfcRatioMeasure.h"
#include "ifcpp/IFC4/include/IfcReal.h"
#include "ifcpp/IFC4/include/IfcRecurrenceTypeEnum.h"
#include "ifcpp/IFC4/include/IfcReflectanceMethodEnum.h"
#include "ifcpp/IFC4/include/IfcReinforcingBarRoleEnum.h"
#include "ifcpp/IFC4/include/IfcReinforcingBarSurfaceEnum.h"
#include "ifcpp/IFC4/include/IfcReinforcingBarTypeEnum.h"
#include "ifcpp/IFC4/include/IfcReinforcingMeshTypeEnum.h"
#include "ifcpp/IFC4/include/IfcResourceObjectSelect.h"
#include "ifcpp/IFC4/include/IfcResourceSelect.h"
#include "ifcpp/IFC4/include/IfcRoleEnum.h"
#include "ifcpp/IFC4/include/IfcRoofTypeEnum.h"
#include "ifcpp/IFC4/include/IfcRotationalFrequencyMeasure.h"
#include "ifcpp/IFC4/include/IfcRotationalMassMeasure.h"
#include "ifcpp/IFC4/include/IfcRotationalStiffnessMeasure.h"
#include "ifcpp/IFC4/include/IfcRotationalStiffnessSelect.h"
#include "ifcpp/IFC4/include/IfcSIPrefix.h"
#include "ifcpp/IFC4/include/IfcSIUnitName.h"
#include "ifcpp/IFC4/include/IfcSanitaryTerminalTypeEnum.h"
#include "ifcpp/IFC4/include/IfcSectionModulusMeasure.h"
#include "ifcpp/IFC4/include/IfcSectionTypeEnum.h"
#include "ifcpp/IFC4/include/IfcSectionalAreaIntegralMeasure.h"
#include "ifcpp/IFC4/include/IfcSegmentIndexSelect.h"
#include "ifcpp/IFC4/include/IfcSensorTypeEnum.h"
#include "ifcpp/IFC4/include/IfcSequenceEnum.h"
#include "ifcpp/IFC4/include/IfcShadingDeviceTypeEnum.h"
#include "ifcpp/IFC4/include/IfcShearModulusMeasure.h"
#include "ifcpp/IFC4/include/IfcShell.h"
#include "ifcpp/IFC4/include/IfcSimplePropertyTemplateTypeEnum.h"
#include "ifcpp/IFC4/include/IfcSimpleValue.h"
#include "ifcpp/IFC4/include/IfcSizeSelect.h"
#include "ifcpp/IFC4/include/IfcSlabTypeEnum.h"
#include "ifcpp/IFC4/include/IfcSolarDeviceTypeEnum.h"
#include "ifcpp/IFC4/include/IfcSolidAngleMeasure.h"
#include "ifcpp/IFC4/include/IfcSolidOrShell.h"
#include "ifcpp/IFC4/include/IfcSoundPowerLevelMeasure.h"
#include "ifcpp/IFC4/include/IfcSoundPowerMeasure.h"
#include "ifcpp/IFC4/include/IfcSoundPressureLevelMeasure.h"
#include "ifcpp/IFC4/include/IfcSoundPressureMeasure.h"
#include "ifcpp/IFC4/include/IfcSpaceBoundarySelect.h"
#include "ifcpp/IFC4/include/IfcSpaceHeaterTypeEnum.h"
#include "ifcpp/IFC4/include/IfcSpaceTypeEnum.h"
#include "ifcpp/IFC4/include/IfcSpatialZoneTypeEnum.h"
#include "ifcpp/IFC4/include/IfcSpecificHeatCapacityMeasure.h"
#include "ifcpp/IFC4/include/IfcSpecularExponent.h"
#include "ifcpp/IFC4/include/IfcSpecularHighlightSelect.h"
#include "ifcpp/IFC4/include/IfcSpecularRoughness.h"
#include "ifcpp/IFC4/include/IfcStackTerminalTypeEnum.h"
#include "ifcpp/IFC4/include/IfcStairFlightTypeEnum.h"
#include "ifcpp/IFC4/include/IfcStairTypeEnum.h"
#include "ifcpp/IFC4/include/IfcStateEnum.h"
#include "ifcpp/IFC4/include/IfcStructuralActivityAssignmentSelect.h"
#include "ifcpp/IFC4/include/IfcStructuralCurveActivityTypeEnum.h"
#include "ifcpp/IFC4/include/IfcStructuralCurveMemberTypeEnum.h"
#include "ifcpp/IFC4/include/IfcStructuralSurfaceActivityTypeEnum.h"
#include "ifcpp/IFC4/include/IfcStructuralSurfaceMemberTypeEnum.h"
#include "ifcpp/IFC4/include/IfcStyleAssignmentSelect.h"
#include "ifcpp/IFC4/include/IfcSubContractResourceTypeEnum.h"
#include "ifcpp/IFC4/include/IfcSurfaceFeatureTypeEnum.h"
#include "ifcpp/IFC4/include/IfcSurfaceOrFaceSurface.h"
#include "ifcpp/IFC4/include/IfcSurfaceSide.h"
#include "ifcpp/IFC4/include/IfcSurfaceStyleElementSelect.h"
#include "ifcpp/IFC4/include/IfcSwitchingDeviceTypeEnum.h"
#include "ifcpp/IFC4/include/IfcSystemFurnitureElementTypeEnum.h"
#include "ifcpp/IFC4/include/IfcTankTypeEnum.h"
#include "ifcpp/IFC4/include/IfcTaskDurationEnum.h"
#include "ifcpp/IFC4/include/IfcTaskTypeEnum.h"
#include "ifcpp/IFC4/include/IfcTemperatureGradientMeasure.h"
#include "ifcpp/IFC4/include/IfcTemperatureRateOfChangeMeasure.h"
#include "ifcpp/IFC4/include/IfcTendonAnchorTypeEnum.h"
#include "ifcpp/IFC4/include/IfcTendonTypeEnum.h"
#include "ifcpp/IFC4/include/IfcText.h"
#include "ifcpp/IFC4/include/IfcTextAlignment.h"
#include "ifcpp/IFC4/include/IfcTextDecoration.h"
#include "ifcpp/IFC4/include/IfcTextFontName.h"
#include "ifcpp/IFC4/include/IfcTextFontSelect.h"
#include "ifcpp/IFC4/include/IfcTextPath.h"
#include "ifcpp/IFC4/include/IfcTextTransformation.h"
#include "ifcpp/IFC4/include/IfcThermalAdmittanceMeasure.h"
#include "ifcpp/IFC4/include/IfcThermalConductivityMeasure.h"
#include "ifcpp/IFC4/include/IfcThermalExpansionCoefficientMeasure.h"
#include "ifcpp/IFC4/include/IfcThermalResistanceMeasure.h"
#include "ifcpp/IFC4/include/IfcThermalTransmittanceMeasure.h"
#include "ifcpp/IFC4/include/IfcThermodynamicTemperatureMeasure.h"
#include "ifcpp/IFC4/include/IfcTime.h"
#include "ifcpp/IFC4/include/IfcTimeMeasure.h"
#include "ifcpp/IFC4/include/IfcTimeOrRatioSelect.h"
#include "ifcpp/IFC4/include/IfcTimeSeriesDataTypeEnum.h"
#include "ifcpp/IFC4/include/IfcTimeStamp.h"
#include "ifcpp/IFC4/include/IfcTorqueMeasure.h"
#include "ifcpp/IFC4/include/IfcTransformerTypeEnum.h"
#include "ifcpp/IFC4/include/IfcTransitionCode.h"
#include "ifcpp/IFC4/include/IfcTranslationalStiffnessSelect.h"
#include "ifcpp/IFC4/include/IfcTransportElementTypeEnum.h"
#include "ifcpp/IFC4/include/IfcTrimmingPreference.h"
#include "ifcpp/IFC4/include/IfcTrimmingSelect.h"
#include "ifcpp/IFC4/include/IfcTubeBundleTypeEnum.h"
#include "ifcpp/IFC4/include/IfcURIReference.h"
#include "ifcpp/IFC4/include/IfcUnit.h"
#include "ifcpp/IFC4/include/IfcUnitEnum.h"
#include "ifcpp/IFC4/include/IfcUnitaryControlElementTypeEnum.h"
#include "ifcpp/IFC4/include/IfcUnitaryEquipmentTypeEnum.h"
#include "ifcpp/IFC4/include/IfcValue.h"
#include "ifcpp/IFC4/include/IfcValveTypeEnum.h"
#include "ifcpp/IFC4/include/IfcVaporPermeabilityMeasure.h"
#include "ifcpp/IFC4/include/IfcVectorOrDirection.h"
#include "ifcpp/IFC4/include/IfcVibrationIsolatorTypeEnum.h"
#include "ifcpp/IFC4/include/IfcVoidingFeatureTypeEnum.h"
#include "ifcpp/IFC4/include/IfcVolumeMeasure.h"
#include "ifcpp/IFC4/include/IfcVolumetricFlowRateMeasure.h"
#include "ifcpp/IFC4/include/IfcWallTypeEnum.h"
#include "ifcpp/IFC4/include/IfcWarpingConstantMeasure.h"
#include "ifcpp/IFC4/include/IfcWarpingMomentMeasure.h"
#include "ifcpp/IFC4/include/IfcWarpingStiffnessSelect.h"
#include "ifcpp/IFC4/include/IfcWasteTerminalTypeEnum.h"
#include "ifcpp/IFC4/include/IfcWindowPanelOperationEnum.h"
#include "ifcpp/IFC4/include/IfcWindowPanelPositionEnum.h"
#include "ifcpp/IFC4/include/IfcWindowStyleConstructionEnum.h"
#include "ifcpp/IFC4/include/IfcWindowStyleOperationEnum.h"
#include "ifcpp/IFC4/include/IfcWindowTypeEnum.h"
#include "ifcpp/IFC4/include/IfcWindowTypePartitioningEnum.h"
#include "ifcpp/IFC4/include/IfcWorkCalendarTypeEnum.h"
#include "ifcpp/IFC4/include/IfcWorkPlanTypeEnum.h"
#include "ifcpp/IFC4/include/IfcWorkScheduleTypeEnum.h"
#include "TypeFactory.h"

	static std::map<std::wstring, std::function<shared_ptr<BuildingObject>( const std::wstring&, const std::map<int, shared_ptr<BuildingEntity> >& )> > type_factory_map = {
{ L"IFCABSORBEDDOSEMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcAbsorbedDoseMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCACCELERATIONMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcAccelerationMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCACTIONREQUESTTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcActionRequestTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCACTIONSOURCETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcActionSourceTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCACTIONTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcActionTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCACTORSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcActorSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCACTUATORTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcActuatorTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCADDRESSTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcAddressTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCAIRTERMINALBOXTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcAirTerminalBoxTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCAIRTERMINALTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcAirTerminalTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCAIRTOAIRHEATRECOVERYTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcAirToAirHeatRecoveryTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCALARMTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcAlarmTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCAMOUNTOFSUBSTANCEMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcAmountOfSubstanceMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCANALYSISMODELTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcAnalysisModelTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCANALYSISTHEORYTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcAnalysisTheoryTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCANGULARVELOCITYMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcAngularVelocityMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCAPPLIEDVALUESELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcAppliedValueSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCARCINDEX", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcArcIndex::createObjectFromSTEP( arg, map ); } },
{ L"IFCAREADENSITYMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcAreaDensityMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCAREAMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcAreaMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCARITHMETICOPERATORENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcArithmeticOperatorEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCASSEMBLYPLACEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcAssemblyPlaceEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCAUDIOVISUALAPPLIANCETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcAudioVisualApplianceTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCAXIS2PLACEMENT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcAxis2Placement::createObjectFromSTEP( arg, map ); } },
{ L"IFCBSPLINECURVEFORM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcBSplineCurveForm::createObjectFromSTEP( arg, map ); } },
{ L"IFCBSPLINESURFACEFORM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcBSplineSurfaceForm::createObjectFromSTEP( arg, map ); } },
{ L"IFCBEAMTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcBeamTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCBENCHMARKENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcBenchmarkEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCBENDINGPARAMETERSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcBendingParameterSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCBINARY", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcBinary::createObjectFromSTEP( arg, map ); } },
{ L"IFCBOILERTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcBoilerTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCBOOLEAN", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcBoolean::createObjectFromSTEP( arg, map ); } },
{ L"IFCBOOLEANOPERAND", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcBooleanOperand::createObjectFromSTEP( arg, map ); } },
{ L"IFCBOOLEANOPERATOR", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcBooleanOperator::createObjectFromSTEP( arg, map ); } },
{ L"IFCBOXALIGNMENT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcBoxAlignment::createObjectFromSTEP( arg, map ); } },
{ L"IFCBUILDINGELEMENTPARTTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcBuildingElementPartTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCBUILDINGELEMENTPROXYTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcBuildingElementProxyTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCBUILDINGSYSTEMTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcBuildingSystemTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCBURNERTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcBurnerTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCCABLECARRIERFITTINGTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcCableCarrierFittingTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCCABLECARRIERSEGMENTTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcCableCarrierSegmentTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCCABLEFITTINGTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcCableFittingTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCCABLESEGMENTTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcCableSegmentTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCCARDINALPOINTREFERENCE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcCardinalPointReference::createObjectFromSTEP( arg, map ); } },
{ L"IFCCHANGEACTIONENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcChangeActionEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCCHILLERTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcChillerTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCCHIMNEYTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcChimneyTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCCLASSIFICATIONREFERENCESELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcClassificationReferenceSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCCLASSIFICATIONSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcClassificationSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCCOILTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcCoilTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCCOLOUR", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcColour::createObjectFromSTEP( arg, map ); } },
{ L"IFCCOLOURORFACTOR", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcColourOrFactor::createObjectFromSTEP( arg, map ); } },
{ L"IFCCOLUMNTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcColumnTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCCOMMUNICATIONSAPPLIANCETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcCommunicationsApplianceTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCCOMPLEXNUMBER", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcComplexNumber::createObjectFromSTEP( arg, map ); } },
{ L"IFCCOMPLEXPROPERTYTEMPLATETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcComplexPropertyTemplateTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCCOMPOUNDPLANEANGLEMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcCompoundPlaneAngleMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCCOMPRESSORTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcCompressorTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCCONDENSERTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcCondenserTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCCONNECTIONTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcConnectionTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCCONSTRAINTENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcConstraintEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCCONSTRUCTIONEQUIPMENTRESOURCETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcConstructionEquipmentResourceTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCCONSTRUCTIONMATERIALRESOURCETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcConstructionMaterialResourceTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCCONSTRUCTIONPRODUCTRESOURCETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcConstructionProductResourceTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCCONTEXTDEPENDENTMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcContextDependentMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCCONTROLLERTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcControllerTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCCOOLEDBEAMTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcCooledBeamTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCCOOLINGTOWERTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcCoolingTowerTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCCOORDINATEREFERENCESYSTEMSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcCoordinateReferenceSystemSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCCOSTITEMTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcCostItemTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCCOSTSCHEDULETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcCostScheduleTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCCOUNTMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcCountMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCCOVERINGTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcCoveringTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCCREWRESOURCETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcCrewResourceTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCCSGSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcCsgSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCCURTAINWALLTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcCurtainWallTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCCURVATUREMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcCurvatureMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCCURVEFONTORSCALEDCURVEFONTSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcCurveFontOrScaledCurveFontSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCCURVEINTERPOLATIONENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcCurveInterpolationEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCCURVEONSURFACE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcCurveOnSurface::createObjectFromSTEP( arg, map ); } },
{ L"IFCCURVEOREDGECURVE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcCurveOrEdgeCurve::createObjectFromSTEP( arg, map ); } },
{ L"IFCCURVESTYLEFONTSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcCurveStyleFontSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCDAMPERTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDamperTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCDATAORIGINENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDataOriginEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCDATE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDate::createObjectFromSTEP( arg, map ); } },
{ L"IFCDATETIME", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDateTime::createObjectFromSTEP( arg, map ); } },
{ L"IFCDAYINMONTHNUMBER", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDayInMonthNumber::createObjectFromSTEP( arg, map ); } },
{ L"IFCDAYINWEEKNUMBER", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDayInWeekNumber::createObjectFromSTEP( arg, map ); } },
{ L"IFCDEFINITIONSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDefinitionSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCDERIVEDMEASUREVALUE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDerivedMeasureValue::createObjectFromSTEP( arg, map ); } },
{ L"IFCDERIVEDUNITENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDerivedUnitEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCDESCRIPTIVEMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDescriptiveMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCDIMENSIONCOUNT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDimensionCount::createObjectFromSTEP( arg, map ); } },
{ L"IFCDIRECTIONSENSEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDirectionSenseEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCDISCRETEACCESSORYTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDiscreteAccessoryTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCDISTRIBUTIONCHAMBERELEMENTTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDistributionChamberElementTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCDISTRIBUTIONPORTTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDistributionPortTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCDISTRIBUTIONSYSTEMENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDistributionSystemEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCDOCUMENTCONFIDENTIALITYENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDocumentConfidentialityEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCDOCUMENTSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDocumentSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCDOCUMENTSTATUSENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDocumentStatusEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCDOORPANELOPERATIONENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDoorPanelOperationEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCDOORPANELPOSITIONENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDoorPanelPositionEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCDOORSTYLECONSTRUCTIONENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDoorStyleConstructionEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCDOORSTYLEOPERATIONENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDoorStyleOperationEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCDOORTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDoorTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCDOORTYPEOPERATIONENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDoorTypeOperationEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCDOSEEQUIVALENTMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDoseEquivalentMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCDUCTFITTINGTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDuctFittingTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCDUCTSEGMENTTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDuctSegmentTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCDUCTSILENCERTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDuctSilencerTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCDURATION", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDuration::createObjectFromSTEP( arg, map ); } },
{ L"IFCDYNAMICVISCOSITYMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcDynamicViscosityMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCELECTRICAPPLIANCETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcElectricApplianceTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCELECTRICCAPACITANCEMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcElectricCapacitanceMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCELECTRICCHARGEMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcElectricChargeMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCELECTRICCONDUCTANCEMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcElectricConductanceMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCELECTRICCURRENTMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcElectricCurrentMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCELECTRICDISTRIBUTIONBOARDTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcElectricDistributionBoardTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCELECTRICFLOWSTORAGEDEVICETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcElectricFlowStorageDeviceTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCELECTRICGENERATORTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcElectricGeneratorTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCELECTRICMOTORTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcElectricMotorTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCELECTRICRESISTANCEMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcElectricResistanceMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCELECTRICTIMECONTROLTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcElectricTimeControlTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCELECTRICVOLTAGEMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcElectricVoltageMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCELEMENTASSEMBLYTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcElementAssemblyTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCELEMENTCOMPOSITIONENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcElementCompositionEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCENERGYMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcEnergyMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCENGINETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcEngineTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCEVAPORATIVECOOLERTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcEvaporativeCoolerTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCEVAPORATORTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcEvaporatorTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCEVENTTRIGGERTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcEventTriggerTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCEVENTTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcEventTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCEXTERNALSPATIALELEMENTTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcExternalSpatialElementTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCFANTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcFanTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCFASTENERTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcFastenerTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCFILLSTYLESELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcFillStyleSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCFILTERTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcFilterTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCFIRESUPPRESSIONTERMINALTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcFireSuppressionTerminalTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCFLOWDIRECTIONENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcFlowDirectionEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCFLOWINSTRUMENTTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcFlowInstrumentTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCFLOWMETERTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcFlowMeterTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCFONTSTYLE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcFontStyle::createObjectFromSTEP( arg, map ); } },
{ L"IFCFONTVARIANT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcFontVariant::createObjectFromSTEP( arg, map ); } },
{ L"IFCFONTWEIGHT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcFontWeight::createObjectFromSTEP( arg, map ); } },
{ L"IFCFOOTINGTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcFootingTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCFORCEMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcForceMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCFREQUENCYMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcFrequencyMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCFURNITURETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcFurnitureTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCGEOGRAPHICELEMENTTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcGeographicElementTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCGEOMETRICPROJECTIONENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcGeometricProjectionEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCGEOMETRICSETSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcGeometricSetSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCGLOBALORLOCALENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcGlobalOrLocalEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCGLOBALLYUNIQUEID", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcGloballyUniqueId::createObjectFromSTEP( arg, map ); } },
{ L"IFCGRIDPLACEMENTDIRECTIONSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcGridPlacementDirectionSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCGRIDTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcGridTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCHATCHLINEDISTANCESELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcHatchLineDistanceSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCHEATEXCHANGERTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcHeatExchangerTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCHEATFLUXDENSITYMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcHeatFluxDensityMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCHEATINGVALUEMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcHeatingValueMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCHUMIDIFIERTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcHumidifierTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCIDENTIFIER", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcIdentifier::createObjectFromSTEP( arg, map ); } },
{ L"IFCILLUMINANCEMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcIlluminanceMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCINDUCTANCEMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcInductanceMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCINTEGER", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcInteger::createObjectFromSTEP( arg, map ); } },
{ L"IFCINTEGERCOUNTRATEMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcIntegerCountRateMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCINTERCEPTORTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcInterceptorTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCINTERNALOREXTERNALENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcInternalOrExternalEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCINVENTORYTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcInventoryTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCIONCONCENTRATIONMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcIonConcentrationMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCISOTHERMALMOISTURECAPACITYMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcIsothermalMoistureCapacityMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCJUNCTIONBOXTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcJunctionBoxTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCKINEMATICVISCOSITYMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcKinematicViscosityMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCKNOTTYPE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcKnotType::createObjectFromSTEP( arg, map ); } },
{ L"IFCLABEL", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcLabel::createObjectFromSTEP( arg, map ); } },
{ L"IFCLABORRESOURCETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcLaborResourceTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCLAMPTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcLampTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCLANGUAGEID", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcLanguageId::createObjectFromSTEP( arg, map ); } },
{ L"IFCLAYERSETDIRECTIONENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcLayerSetDirectionEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCLAYEREDITEM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcLayeredItem::createObjectFromSTEP( arg, map ); } },
{ L"IFCLENGTHMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcLengthMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCLIBRARYSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcLibrarySelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCLIGHTDISTRIBUTIONCURVEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcLightDistributionCurveEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCLIGHTDISTRIBUTIONDATASOURCESELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcLightDistributionDataSourceSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCLIGHTEMISSIONSOURCEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcLightEmissionSourceEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCLIGHTFIXTURETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcLightFixtureTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCLINEINDEX", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcLineIndex::createObjectFromSTEP( arg, map ); } },
{ L"IFCLINEARFORCEMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcLinearForceMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCLINEARMOMENTMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcLinearMomentMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCLINEARSTIFFNESSMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcLinearStiffnessMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCLINEARVELOCITYMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcLinearVelocityMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCLOADGROUPTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcLoadGroupTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCLOGICAL", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcLogical::createObjectFromSTEP( arg, map ); } },
{ L"IFCLOGICALOPERATORENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcLogicalOperatorEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCLUMINOUSFLUXMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcLuminousFluxMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcLuminousIntensityDistributionMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCLUMINOUSINTENSITYMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcLuminousIntensityMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCMAGNETICFLUXDENSITYMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcMagneticFluxDensityMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCMAGNETICFLUXMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcMagneticFluxMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCMASSDENSITYMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcMassDensityMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCMASSFLOWRATEMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcMassFlowRateMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCMASSMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcMassMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCMASSPERLENGTHMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcMassPerLengthMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCMATERIALSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcMaterialSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCMEASUREVALUE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcMeasureValue::createObjectFromSTEP( arg, map ); } },
{ L"IFCMECHANICALFASTENERTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcMechanicalFastenerTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCMEDICALDEVICETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcMedicalDeviceTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCMEMBERTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcMemberTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCMETRICVALUESELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcMetricValueSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCMODULUSOFELASTICITYMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcModulusOfElasticityMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcModulusOfLinearSubgradeReactionMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcModulusOfRotationalSubgradeReactionMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCMODULUSOFROTATIONALSUBGRADEREACTIONSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcModulusOfRotationalSubgradeReactionSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCMODULUSOFSUBGRADEREACTIONMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcModulusOfSubgradeReactionMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCMODULUSOFSUBGRADEREACTIONSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcModulusOfSubgradeReactionSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCMODULUSOFTRANSLATIONALSUBGRADEREACTIONSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcModulusOfTranslationalSubgradeReactionSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCMOISTUREDIFFUSIVITYMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcMoistureDiffusivityMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCMOLECULARWEIGHTMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcMolecularWeightMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCMOMENTOFINERTIAMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcMomentOfInertiaMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCMONETARYMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcMonetaryMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCMONTHINYEARNUMBER", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcMonthInYearNumber::createObjectFromSTEP( arg, map ); } },
{ L"IFCMOTORCONNECTIONTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcMotorConnectionTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCNONNEGATIVELENGTHMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcNonNegativeLengthMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCNORMALISEDRATIOMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcNormalisedRatioMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCNULLSTYLE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcNullStyle::createObjectFromSTEP( arg, map ); } },
{ L"IFCNUMERICMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcNumericMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCOBJECTREFERENCESELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcObjectReferenceSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCOBJECTTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcObjectTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCOBJECTIVEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcObjectiveEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCOCCUPANTTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcOccupantTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCOPENINGELEMENTTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcOpeningElementTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCOUTLETTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcOutletTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCPHMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcPHMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCPARAMETERVALUE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcParameterValue::createObjectFromSTEP( arg, map ); } },
{ L"IFCPERFORMANCEHISTORYTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcPerformanceHistoryTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCPERMEABLECOVERINGOPERATIONENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcPermeableCoveringOperationEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCPERMITTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcPermitTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCPHYSICALORVIRTUALENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcPhysicalOrVirtualEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCPILECONSTRUCTIONENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcPileConstructionEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCPILETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcPileTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCPIPEFITTINGTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcPipeFittingTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCPIPESEGMENTTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcPipeSegmentTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCPLANARFORCEMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcPlanarForceMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCPLANEANGLEMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcPlaneAngleMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCPLATETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcPlateTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCPOINTORVERTEXPOINT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcPointOrVertexPoint::createObjectFromSTEP( arg, map ); } },
{ L"IFCPOSITIVEINTEGER", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcPositiveInteger::createObjectFromSTEP( arg, map ); } },
{ L"IFCPOSITIVELENGTHMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcPositiveLengthMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCPOSITIVEPLANEANGLEMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcPositivePlaneAngleMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCPOSITIVERATIOMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcPositiveRatioMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCPOWERMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcPowerMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCPREFERREDSURFACECURVEREPRESENTATION", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcPreferredSurfaceCurveRepresentation::createObjectFromSTEP( arg, map ); } },
{ L"IFCPRESENTABLETEXT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcPresentableText::createObjectFromSTEP( arg, map ); } },
{ L"IFCPRESENTATIONSTYLESELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcPresentationStyleSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCPRESSUREMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcPressureMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCPROCEDURETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcProcedureTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCPROCESSSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcProcessSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCPRODUCTREPRESENTATIONSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcProductRepresentationSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCPRODUCTSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcProductSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCPROFILETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcProfileTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCPROJECTORDERTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcProjectOrderTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCPROJECTEDORTRUELENGTHENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcProjectedOrTrueLengthEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCPROJECTIONELEMENTTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcProjectionElementTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCPROPERTYSETDEFINITIONSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcPropertySetDefinitionSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCPROPERTYSETDEFINITIONSET", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcPropertySetDefinitionSet::createObjectFromSTEP( arg, map ); } },
{ L"IFCPROPERTYSETTEMPLATETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcPropertySetTemplateTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCPROTECTIVEDEVICETRIPPINGUNITTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcProtectiveDeviceTrippingUnitTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCPROTECTIVEDEVICETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcProtectiveDeviceTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCPUMPTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcPumpTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCRADIOACTIVITYMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcRadioActivityMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCRAILINGTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcRailingTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCRAMPFLIGHTTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcRampFlightTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCRAMPTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcRampTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCRATIOMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcRatioMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCREAL", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcReal::createObjectFromSTEP( arg, map ); } },
{ L"IFCRECURRENCETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcRecurrenceTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCREFLECTANCEMETHODENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcReflectanceMethodEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCREINFORCINGBARROLEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcReinforcingBarRoleEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCREINFORCINGBARSURFACEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcReinforcingBarSurfaceEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCREINFORCINGBARTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcReinforcingBarTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCREINFORCINGMESHTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcReinforcingMeshTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCRESOURCEOBJECTSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcResourceObjectSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCRESOURCESELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcResourceSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCROLEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcRoleEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCROOFTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcRoofTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCROTATIONALFREQUENCYMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcRotationalFrequencyMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCROTATIONALMASSMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcRotationalMassMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCROTATIONALSTIFFNESSMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcRotationalStiffnessMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCROTATIONALSTIFFNESSSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcRotationalStiffnessSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCSIPREFIX", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSIPrefix::createObjectFromSTEP( arg, map ); } },
{ L"IFCSIUNITNAME", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSIUnitName::createObjectFromSTEP( arg, map ); } },
{ L"IFCSANITARYTERMINALTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSanitaryTerminalTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCSECTIONMODULUSMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSectionModulusMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCSECTIONTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSectionTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCSECTIONALAREAINTEGRALMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSectionalAreaIntegralMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCSEGMENTINDEXSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSegmentIndexSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCSENSORTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSensorTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCSEQUENCEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSequenceEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCSHADINGDEVICETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcShadingDeviceTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCSHEARMODULUSMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcShearModulusMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCSHELL", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcShell::createObjectFromSTEP( arg, map ); } },
{ L"IFCSIMPLEPROPERTYTEMPLATETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSimplePropertyTemplateTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCSIMPLEVALUE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSimpleValue::createObjectFromSTEP( arg, map ); } },
{ L"IFCSIZESELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSizeSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCSLABTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSlabTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCSOLARDEVICETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSolarDeviceTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCSOLIDANGLEMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSolidAngleMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCSOLIDORSHELL", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSolidOrShell::createObjectFromSTEP( arg, map ); } },
{ L"IFCSOUNDPOWERLEVELMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSoundPowerLevelMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCSOUNDPOWERMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSoundPowerMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCSOUNDPRESSURELEVELMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSoundPressureLevelMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCSOUNDPRESSUREMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSoundPressureMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCSPACEBOUNDARYSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSpaceBoundarySelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCSPACEHEATERTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSpaceHeaterTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCSPACETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSpaceTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCSPATIALZONETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSpatialZoneTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCSPECIFICHEATCAPACITYMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSpecificHeatCapacityMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCSPECULAREXPONENT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSpecularExponent::createObjectFromSTEP( arg, map ); } },
{ L"IFCSPECULARHIGHLIGHTSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSpecularHighlightSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCSPECULARROUGHNESS", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSpecularRoughness::createObjectFromSTEP( arg, map ); } },
{ L"IFCSTACKTERMINALTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcStackTerminalTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCSTAIRFLIGHTTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcStairFlightTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCSTAIRTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcStairTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCSTATEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcStateEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCSTRUCTURALACTIVITYASSIGNMENTSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcStructuralActivityAssignmentSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCSTRUCTURALCURVEACTIVITYTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcStructuralCurveActivityTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCSTRUCTURALCURVEMEMBERTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcStructuralCurveMemberTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCSTRUCTURALSURFACEACTIVITYTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcStructuralSurfaceActivityTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCSTRUCTURALSURFACEMEMBERTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcStructuralSurfaceMemberTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCSTYLEASSIGNMENTSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcStyleAssignmentSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCSUBCONTRACTRESOURCETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSubContractResourceTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCSURFACEFEATURETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSurfaceFeatureTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCSURFACEORFACESURFACE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSurfaceOrFaceSurface::createObjectFromSTEP( arg, map ); } },
{ L"IFCSURFACESIDE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSurfaceSide::createObjectFromSTEP( arg, map ); } },
{ L"IFCSURFACESTYLEELEMENTSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSurfaceStyleElementSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCSWITCHINGDEVICETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSwitchingDeviceTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCSYSTEMFURNITUREELEMENTTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcSystemFurnitureElementTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCTANKTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcTankTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCTASKDURATIONENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcTaskDurationEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCTASKTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcTaskTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCTEMPERATUREGRADIENTMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcTemperatureGradientMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCTEMPERATURERATEOFCHANGEMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcTemperatureRateOfChangeMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCTENDONANCHORTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcTendonAnchorTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCTENDONTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcTendonTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCTEXT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcText::createObjectFromSTEP( arg, map ); } },
{ L"IFCTEXTALIGNMENT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcTextAlignment::createObjectFromSTEP( arg, map ); } },
{ L"IFCTEXTDECORATION", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcTextDecoration::createObjectFromSTEP( arg, map ); } },
{ L"IFCTEXTFONTNAME", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcTextFontName::createObjectFromSTEP( arg, map ); } },
{ L"IFCTEXTFONTSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcTextFontSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCTEXTPATH", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcTextPath::createObjectFromSTEP( arg, map ); } },
{ L"IFCTEXTTRANSFORMATION", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcTextTransformation::createObjectFromSTEP( arg, map ); } },
{ L"IFCTHERMALADMITTANCEMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcThermalAdmittanceMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCTHERMALCONDUCTIVITYMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcThermalConductivityMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCTHERMALEXPANSIONCOEFFICIENTMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcThermalExpansionCoefficientMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCTHERMALRESISTANCEMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcThermalResistanceMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCTHERMALTRANSMITTANCEMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcThermalTransmittanceMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCTHERMODYNAMICTEMPERATUREMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcThermodynamicTemperatureMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCTIME", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcTime::createObjectFromSTEP( arg, map ); } },
{ L"IFCTIMEMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcTimeMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCTIMEORRATIOSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcTimeOrRatioSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCTIMESERIESDATATYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcTimeSeriesDataTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCTIMESTAMP", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcTimeStamp::createObjectFromSTEP( arg, map ); } },
{ L"IFCTORQUEMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcTorqueMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCTRANSFORMERTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcTransformerTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCTRANSITIONCODE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcTransitionCode::createObjectFromSTEP( arg, map ); } },
{ L"IFCTRANSLATIONALSTIFFNESSSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcTranslationalStiffnessSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCTRANSPORTELEMENTTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcTransportElementTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCTRIMMINGPREFERENCE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcTrimmingPreference::createObjectFromSTEP( arg, map ); } },
{ L"IFCTRIMMINGSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcTrimmingSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCTUBEBUNDLETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcTubeBundleTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCURIREFERENCE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcURIReference::createObjectFromSTEP( arg, map ); } },
{ L"IFCUNIT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcUnit::createObjectFromSTEP( arg, map ); } },
{ L"IFCUNITENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcUnitEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCUNITARYCONTROLELEMENTTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcUnitaryControlElementTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCUNITARYEQUIPMENTTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcUnitaryEquipmentTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCVALUE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcValue::createObjectFromSTEP( arg, map ); } },
{ L"IFCVALVETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcValveTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCVAPORPERMEABILITYMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcVaporPermeabilityMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCVECTORORDIRECTION", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcVectorOrDirection::createObjectFromSTEP( arg, map ); } },
{ L"IFCVIBRATIONISOLATORTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcVibrationIsolatorTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCVOIDINGFEATURETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcVoidingFeatureTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCVOLUMEMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcVolumeMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCVOLUMETRICFLOWRATEMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcVolumetricFlowRateMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCWALLTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcWallTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCWARPINGCONSTANTMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcWarpingConstantMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCWARPINGMOMENTMEASURE", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcWarpingMomentMeasure::createObjectFromSTEP( arg, map ); } },
{ L"IFCWARPINGSTIFFNESSSELECT", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcWarpingStiffnessSelect::createObjectFromSTEP( arg, map ); } },
{ L"IFCWASTETERMINALTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcWasteTerminalTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCWINDOWPANELOPERATIONENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcWindowPanelOperationEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCWINDOWPANELPOSITIONENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcWindowPanelPositionEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCWINDOWSTYLECONSTRUCTIONENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcWindowStyleConstructionEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCWINDOWSTYLEOPERATIONENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcWindowStyleOperationEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCWINDOWTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcWindowTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCWINDOWTYPEPARTITIONINGENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcWindowTypePartitioningEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCWORKCALENDARTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcWorkCalendarTypeEnum::createObjectFromSTEP( arg, map ); } },
{ L"IFCWORKPLANTYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcWorkPlanTypeEnum::createObjectFromSTEP( arg, map ); } },
	{ L"IFCWORKSCHEDULETYPEENUM", []( const std::wstring& arg, const std::map<int, shared_ptr<BuildingEntity> >& map )->shared_ptr<BuildingObject> { return IfcWorkScheduleTypeEnum::createObjectFromSTEP( arg, map ); } }
};

shared_ptr<BuildingObject> TypeFactory::createTypeObject( const std::wstring& class_name_upper, const std::wstring& type_arg, const std::map<int, shared_ptr<BuildingEntity> >& map_entities )
{
	auto it_find = type_factory_map.find( class_name_upper );
	if( it_find != type_factory_map.end() )
	{
		return it_find->second( type_arg, map_entities );
	}
	// class_name not registered
	return shared_ptr<BuildingObject>();
}
void TypeFactory::emptyMapOfTypes()
{
	type_factory_map.clear();
}
